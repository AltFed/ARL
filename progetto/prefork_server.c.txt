/* Server TCP con preforking e file locking 
   Ultima revisione: 11 gennaio 2007 */

#include <signal.h>
#include <sys/wait.h>
#include "basic.h"
#include "preforking.h"

typedef void Sigfunc(int);

Sigfunc* signal(int signum, Sigfunc *handler);

static int	nchildren;
static pid_t	*pids;

int main(int argc, char **argv)
{
  int	listensd, i;
  struct sockaddr_in    servaddr;
  socklen_t	addrlen=sizeof(servaddr);
  void		sig_int(int);

  if (argc != 2) { 
    fprintf(stderr, "usage: prefork <#children>\n");
    exit(1);
  }
  nchildren = atoi(argv[1]);

  if ((listensd = socket(AF_INET, SOCK_STREAM, 0)) < 0) { /* crea il socket */
    perror("errore in socket");
    exit(1);
  }

  memset((void *)&servaddr, 0, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY); /* il server accetta
        connessioni su una qualunque delle sue intefacce di rete */
  servaddr.sin_port = htons(SERV_PORT); /* numero di porta del server */

  /* assegna l'indirizzo al socket */
  if ((bind(listensd, (struct sockaddr *) &servaddr, sizeof(servaddr))) < 0) {
    perror("errore in bind");
    exit(1);
  }

  if (listen(listensd, BACKLOG) < 0 ) { 
    perror("errore in listen");
    exit(1);
  }

  pids = (pid_t *)calloc(nchildren, sizeof(pid_t));
  if (pids == NULL) 
  { 
    fprintf(stderr, "errore in calloc");
    exit(1);
  }
  
  my_lock_init("/tmp/lock.XXXXXX"); /* one lock file for all children */
  for (i = 0; i < nchildren; i++)
    pids[i] = child_make(i, listensd, addrlen);	/* parent returns */

  if (signal(SIGINT, sig_int) == SIG_ERR) {
    fprintf(stderr, "errore in signal");
    exit(1);
  }

  for ( ; ; )
    pause();	/* everything done by children */
}

Sigfunc *signal(int signum, Sigfunc *func)
{
  struct sigaction      act, oact;
        /* la struttura sigaction memorizza informazioni riguardanti la
        manipolazione del segnale */

  act.sa_handler = func;
  sigemptyset(&act.sa_mask);    /* non occorre bloccare nessun altro segnale */
  act.sa_flags = 0;
  if (signum != SIGALRM)
     act.sa_flags |= SA_RESTART;
  if (sigaction(signum, &act, &oact) < 0)
    return(SIG_ERR);
  return(oact.sa_handler);
}

void sig_int(int signo)
{
  int	i;
  void	pr_cpu_time(void);

	/* terminate all children */
  for (i = 0; i < nchildren; i++)
    kill(pids[i], SIGTERM);
  while (wait(NULL) > 0) ;	/* wait for all children */
		
  if (errno != ECHILD)  {
    fprintf(stderr, "errore in wait");
    exit(1);
  }
	
  pr_cpu_time();
  exit(0);
}
